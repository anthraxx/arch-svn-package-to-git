#!/bin/env python
import hashlib
import os
import shutil
import sys
import re
import traceback

from pathlib import Path
from subprocess import CalledProcessError, PIPE, run
from tempfile import NamedTemporaryFile
from typing import List, Dict, Set, Tuple, Optional


BRANCH_NAME = "main"


class Style:
    """Common console styles."""

    RESET = "\033[0m"
    BOLD = "\033[1m"
    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    BLUE = "\033[34m"


class Version:
    """Version information.

    Attributes:
        epoch (Optional[str]): epoch qualifier
        pkgver (str): primary version
        pkgrel (str): release fragment
    """

    def __init__(self, epoch: Optional[str], pkgver: str, pkgrel: str):
        self.epoch: Optional[str] = epoch
        self.pkgver: str = pkgver
        self.pkgrel: str = pkgrel

    @property
    def tag(self):
        """Get a git tag compatible representation of the pkgver.

        @see git-check-ref-format for more details.
        """
        if self.epoch:
            tag = f"{self.epoch}-{self.pkgver}-{self.pkgrel}"
        else:
            tag = f"{self.pkgver}-{self.pkgrel}"

        tag = tag.replace('~', '.')
        tag = tag.replace(':', '.')
        return tag

    def __str__(self):
        if self.epoch:
            return f"{self.epoch}:{self.pkgver}-{self.pkgrel}"
        return f"{self.pkgver}-{self.pkgrel}"

    def __repr__(self):
        return str(self)


class Release:
    """Release information.

    Attributes:
        version (Version): version information.
        file_hash (str): PKGBUILD file hash.
        input_commit (str): commit of input git repository.
        target_commit (Optional[str]): target commit to tag.
        name (str): author name.
        email (str): author email.
        date (str): release date.
    """

    def __init__(self, version: Version, file_hash: str, input_commit: str, name: str, email: str, date: str):
        self.version: Version = version
        self.file_hash: str = file_hash
        self.input_commit: str = input_commit
        self.target_commit: Optional[str] = None
        self.name: str = name
        self.email: str = email
        self.date: str = date

    def __repr__(self):
        return str(
            {
                "version": self.version,
                "file_hash": self.file_hash,
                "input_commit": self.input_commit,
                "target_commit": self.target_commit,
                "author": f'{self.name} <{self.email}>',
                "date": self.date
            }
        )


class Author:
    """Author information.

    Attributes:
        name (str): author name.
        email (str): author email.
        old_name (str): old name for mapping.
    """

    def __init__(self, name: str, email: str, old_name: str):
        self.name: str = name
        self.email: str = email
        self.old_name: str = old_name

    def __str__(self):
        return f'{self.name} <{self.email}>'

    def __repr__(self):
        return str(
            {
                "name": self.name,
                "email": self.email,
                "old_name": self.old_name,
            }
        )


def debug2(message: str):
    """Pretty format second level debug message.

    Args:
        message (str): message to format.
    """
    if not os.environ.get('GITSVN2GIT_DEBUG'):
        return
    s = Style()
    print(f"{s.BOLD}{s.YELLOW}  ->{s.RESET}{s.BOLD} {message}{s.RESET}")


def debug3(message: str):
    """Pretty format third level debug message.

    Args:
        message (str): message to format.
    """
    if not os.environ.get('GITSVN2GIT_DEBUG'):
        return
    s = Style()
    print(f"{s.BOLD}{s.YELLOW}    路>{s.RESET}{s.BOLD} {message}{s.RESET}")


def msg1(message: str):
    """Pretty format first level message.

    Args:
        message (str): message to format.
    """
    s = Style()
    print(f"{s.BOLD}{s.GREEN}==>{s.RESET}{s.BOLD} {message}{s.RESET}")


def msg2(message: str):
    """Pretty format second level message.

    Args:
        message (str): message to format.
    """
    s = Style()
    print(f"{s.BOLD}{s.BLUE}  ->{s.RESET}{s.BOLD} {message}{s.RESET}")


def msg3(message: str):
    """Pretty format third level message.

    Args:
        message (str): message to format.
    """
    s = Style()
    print(f"{s.BOLD}{s.YELLOW}    路>{s.RESET}{s.BOLD} {message}{s.RESET}")


def error1(error: str, log_error: bool = True, topic: str = 'script'):
    """Pretty format first level error message.

    Args:
        error (str): message to format.
        log_error (bool): wheather to log the error to a file.
        topic (str): the pkgname responsible.
    """
    s = Style()
    print(f"{s.BOLD}{s.RED}==>{s.RESET}{s.BOLD} {error}{s.RESET}")
    if log:
        log(f'{topic}: {error}\n')
    if os.environ.get('GITSVN2GIT_BREAKPOINT_ON_ERROR'):
        breakpoint()


def error2(error: str):
    """Pretty format 2nd level error message.

    Args:
        error (str): message to format.
    """
    s = Style()
    print(f"{s.BOLD}{s.RED}  ->{s.RESET}{s.BOLD} {error}{s.RESET}")
    if os.environ.get('GITSVN2GIT_BREAKPOINT_ON_ERROR'):
        breakpoint()


def error3(error: str):
    """Pretty format third level error message.

    Args:
        message (str): message to format.
    """
    s = Style()
    print(f"{s.BOLD}{s.RED}    路>{s.RESET}{s.BOLD} {error}{s.RESET}")
    if os.environ.get('GITSVN2GIT_BREAKPOINT_ON_ERROR'):
        breakpoint()


def warn2(warn: str, pedantic: bool = False):
    """Pretty format 2nd level warn message.

    Args:
        warn (str): message to format.
        pedantic (bool): wether to treat this warning in pedantic mode as error.
    """
    if os.environ.get('GITSVN2GIT_WERROR') or (pedantic and os.environ.get('GITSVN2GIT_PEDANTIC')):
        error2(warn)
        return

    s = Style()
    print(f"{s.BOLD}{s.YELLOW}  ->{s.RESET}{s.BOLD} {warn}{s.RESET}")


def warn3(warn: str, pedantic: bool = False):
    """Pretty format 2nd level warn message.

    Args:
        warn (str): message to format.
        pedantic (bool): wether to treat this warning in pedantic mode as error.
    """
    if os.environ.get('GITSVN2GIT_WERROR') or (pedantic and os.environ.get('GITSVN2GIT_PEDANTIC')):
        error3(warn)
        return

    s = Style()
    print(f"{s.BOLD}{s.YELLOW}    路>{s.RESET}{s.BOLD} {warn}{s.RESET}")


def log(message: str, filename: str = 'gitsvn2git.log'):
    """Log message to file for later investigation.

    Args:
        message (str): message to log.
        filename (str): filename to log to (default gitsvn2git.log)
    """
    with open(filename, 'a') as f:
        f.write(f'{message}')


def parse_input() -> Tuple[Path, Path, List[str], Dict[str, Author]]:
    """Parse input arguments.

    Returns:
        tuple(Path, Path, List[str], Dict[str, Author]): input_dir, target_dir, list of packages and list of authors by old_name.
    """
    if len(sys.argv) < 3:
        print(f"Usage: {__file__} INPUT_DIR TARGET_DIR [PACKAGE(s)]...")
        exit()

    input_dir = Path(sys.argv[1])
    if not input_dir.exists() or not input_dir.is_dir():
        error1(f"Input directory not found: {input_dir}")
        exit(1)
    if not (input_dir / 'packed-refs').exists() or (input_dir / 'index').exists():
        error1(f"Input directory not a bare git clone: {input_dir}")
        exit(1)

    package_refs: List[str] = []
    with open(input_dir / 'packed-refs', 'r') as f:
        for ref in f.read().splitlines():
            if 'refs/heads/packages/' not in ref:
                continue
            package_refs.append(ref.split()[1])

    packages: List[str] = []
    if len(sys.argv) > 3:
        if '--update' == sys.argv[3]:
            anchor, head = fetch_repository(input_dir)
            packages = get_package_updates_since(input_dir, anchor)
        else:
            for package in sys.argv[3:]:
                if f'refs/heads/packages/{package}' not in package_refs:
                    error1(f"Package ref not found: {package}")
                    continue
                packages.append(package)
    else:
        packages = list(map(lambda path: Path(path).name, package_refs))

    authors: Dict[str, Author] = {}
    with open(Path(__file__).parent.joinpath('AUTHORS')) as f:
        for line in filter(lambda line: not line.startswith('#'), f.read().splitlines()):
            matches = re.search(r'([\w ]+) <(.+)> (\w+)', line)
            if not matches:
                error1(f'Invalid author line: {line}')
                continue
            author = Author(*matches.groups())
            authors[author.old_name] = author

    target_dir = Path(sys.argv[2])
    target_dir.mkdir(exist_ok=True, parents=True)

    return input_dir, target_dir, packages, authors


def fetch_repository(input_dir: Path) -> Tuple[str, str]:
    """Fetch the input repository and return anchor and current head.

    Args:
        input_dir (Path): input repository directory.

    Returns:
        Tuple[str, str]: anchor commit before fetch, head commit after fetch.
    """
    try:
        p = run(f"git -C '{input_dir}' rev-parse refs/heads/master", check=True, shell=True, stdout=PIPE)
        anchor = p.stdout.decode().strip()

        msg1("Fetching input repository, may take a while...")
        run(f"git -C '{input_dir}' fetch origin --prune --prune-tags", check=True, shell=True)

        p = run(f"git -C '{input_dir}' rev-parse refs/heads/master", check=True, shell=True, stdout=PIPE)
        head = p.stdout.decode().strip()
        msg2(f"Updated input repository from {anchor} to {head}")

        pack_refs(input_dir)

        return anchor, head
    except CalledProcessError as e:
        error1(f"Error fetching repository {input_dir}...")
        raise e


def pack_refs(input_dir: Path) -> None:
    """Pack heads and tags for efficient repository access.

    Args:
        input_dir (Path): input repository directory.
    """
    try:
        msg1(f"Packing refs in '{input_dir}'...")
        run(f"git -C '{input_dir}' pack-refs --all", check=True, shell=True, stdout=PIPE)
    except CalledProcessError as e:
        error1(f"Error packing refs for repository {input_dir}", topic=input_dir.name)
        raise e


def get_package_updates_since(input_dir: Path, since: str) -> List[str]:
    """Fetch the package input repository.

    Args:
        input_dir (Path): input repository directory.
        since (str): anchor commit to search for updated packages.

    Returns:
        List[str]: all packages that got updated since the specified commit.
    """
    try:
        p = run(f"git -C '{input_dir}' rev-parse refs/heads/master", check=True, shell=True, stdout=PIPE)
        head = p.stdout.decode().strip()

        if since == head:
            return []

        p = run(f'git -C "{input_dir}" rev-list "{since}"..refs/heads/master', check=True, shell=True, stdout=PIPE)
        commits: List[str] = p.stdout.decode().splitlines()

        packages: Set[str] = set()
        for commit in commits:
            p = run(f'git -C "{input_dir}" show --pretty="" --name-only "{commit}"', check=True, shell=True, stdout=PIPE)
            names: List[str] = p.stdout.decode().splitlines()
            for name in names:
                packages.add(name.split('/')[0])

        return list(sorted(packages))
    except CalledProcessError as e:
        error1(f"Error getting package updates of repository {input_dir}...")
        raise e


def clone_repository(input_dir: Path, package_dir: Path):
    """Clone input repository to target_dir.

    Args:
        input_dir (Path): input repository directory.
        package_dir (Path): package directory.
    """
    msg2("Cloning parent repository...")
    try:
        run(
            (
                f"git clone {input_dir} --no-local --branch packages/{package_dir.name}"
                f" --single-branch {package_dir}"
            ),
            check=True,
            shell=True,
        )
    except CalledProcessError as e:
        error1(f"Error cloning repository to {target_dir}...", topic=package_dir.name)
        raise e


def filter_subdirectory(package_dir: Path, subdirectory: Path) -> None:
    """Filter subdirectory in the package repository.

    Args:
        package_dir (Path): package directory.
        subdirectory (Path): subdirectory in the repository.
    """
    subdirectory = (package_dir / subdirectory).relative_to(package_dir)
    msg2(f"Filtering subdirectory '{subdirectory}'...")
    try:
        run(
            f"git-filter-repo --subdirectory-filter {subdirectory}",
            check=True,
            shell=True,
            cwd=package_dir,
        )
    except CalledProcessError as e:
        error1(f"Error filtering subdirectory '{subdirectory}'...", topic=package_dir.name)
        raise e


def get_version_from_pkgbuild(pkgbuild: bytes) -> Optional[Version]:
    """Extract version from the PKGBUILD content.

    Args:
        pkgbuild (bytes): PKGBUILD content.
    Returns:
        Optional[Version]: version information extracted from the PKGBUILD.
    """
    # It needs to generate a temporary file to be parsed in bash since it got
    # no direct access to PKGBUILD in the filesystem.
    with NamedTemporaryFile() as tmpfile:
        tmpfile.write(pkgbuild)
        tmpfile.flush()

        try:
            p = run(
                f"bash -c 'source {tmpfile.name} && printf \"%s\\n%s\\n%s\\n\" \"$epoch\" \"$pkgver\" \"$pkgrel\"'",
                check=True,
                shell=True,
                cwd=package_dir,
                stdout=PIPE,
                stderr=PIPE,
            )
            version_info: List[str] = p.stdout.decode().splitlines()
            epoch, pkgver, pkgrel = version_info
            return Version(epoch, pkgver, pkgrel)
        except CalledProcessError as e:
            warn3(f'PKGBUILD is not parsable: {e.stderr.decode()}')
            return None


def get_pkgbuild(package_dir: Path, file: str, commit: str) -> Optional[bytes]:
    """Get PKGBUILD content in an specific commit.

    Args:
        package_dir (Path): package directory.
        file (str): PKGBUILD file.
        commit (str): commit hash.

    Returns:
        Optional[bytes]: PKGBUILD content or None.
    """

    p = run(
        f"git show {commit}:{file}",
        cwd=package_dir,
        shell=True,
        stdout=PIPE,
        stderr=PIPE,
    )
    if p.returncode != 0:
        debug3(f'Cannot find PKGBUILD in {commit} - Skipping')
        return None

    debug3(f'reading PKGBUILD of commit {commit}')
    pkgbuild = p.stdout

    # Remove svn '# $Id$' since this will cause a md5sum mismatch
    pkgbuild = pkgbuild.replace(b"# $Id$\n", b"")

    # Remove expanded errorous svn '# $Id: '
    if pkgbuild_lines := pkgbuild.splitlines(keepends=True):
        if pkgbuild_lines[0].startswith(b'# $Id: PKGBUILD '):
            pkgbuild = b''.join(pkgbuild_lines[1:])

    return pkgbuild


def get_releases(
    package_dir: Path,
    grep: str = "^archrelease: ",
) -> List[Release]:
    """Get releases from the PKGBUILD filtering commit messages.

    Args:
        package_dir (Path): package directory.
        grep (str): string to be used in git grep.

    Returns:
        List[Release]: a list of the releases.
    """
    msg2("Parsing releases...")
    try:
        releases = []
        p = run(
            f"git log --pretty='%h%n%s%n%an%n%ae%n%ad%n%n' --grep='{grep}' -- repos",
            check=True,
            cwd=package_dir,
            shell=True,
            stdout=PIPE,
        )
        commits = [x for x in p.stdout.decode().split('\n\n\n') if x]
        for commit in commits:
            commit_hash: str
            subject: str
            name: str
            email: str
            date: str
            commit_hash, subject, name, email, date = commit.splitlines()
            subject = subject.split('archrelease: ', maxsplit=1)[1]

            release_repos: List[str]
            if subject.startswith('copy trunk to '):
                release_repos = subject.split('copy trunk to ')[1].split(', ')
            elif subject.startswith('copy kde-unstable to '):
                release_repos = subject.split('copy kde-unstable to ')[1].split(', ')
            elif subject.startswith('copy gnome-unstable to '):
                release_repos = subject.split('copy gnome-unstable to ')[1].split(', ')
            elif subject.startswith('new repo '):
                release_repos = subject.split('new repo ')[1].split(', ')
            elif subject.startswith('New repo '):
                release_repos = subject.split('New repo ')[1].split(', ')
            elif subject.startswith('remove '):
                continue
            else:
                error3(f'Unknown archrelease type: {subject}')
                continue

            pkgbuild = None
            for release_repo in release_repos:
                pkgbuild_file = f'repos/{release_repo}/PKGBUILD'
                if pkgbuild := get_pkgbuild(package_dir, pkgbuild_file, commit_hash):
                    break

            if not pkgbuild:
                warn3(f"Error getting PKGBUILD from {commit_hash} - Skipping")
                continue

            md5 = hashlib.md5(pkgbuild)
            file_hash = md5.hexdigest()

            version = get_version_from_pkgbuild(pkgbuild)
            if not version:
                warn3(f'Error parsing PKGBUILD from {commit_hash} - Skipping')
                continue

            release = Release(version, file_hash, commit_hash, name, email, date)
            releases.append(release)

            debug3(f'Found release: {release}')
        return releases
    except CalledProcessError as e:
        error1("Error parsing releases from log...", topic=package_dir.name)
        raise e


def rewrite_history(package_dir: Path):
    """Rewrite repository history and clean messages.

    Args:
        package_dir (Path): package directory.
    """
    msg2("Rewrite history...")
    try:
        mailmap_file = Path(__file__).parent / "AUTHORS"
        msg3("Remapping authors...")
        run(
            f"git-filter-repo --mailmap {mailmap_file.absolute()}",
            check=True,
            cwd=package_dir,
            shell=True,
            stdout=PIPE,
        )
        msg3("Remapping commiter to author...")
        run(
            (
                "git-filter-repo --commit-callback '"
                "commit.committer_name  = commit.author_name\n"
                "commit.committer_email = commit.author_email\n"
                "commit.committer_date  = commit.author_date'"
            ),
            check=True,
            cwd=package_dir,
            shell=True,
            stdout=PIPE,
        )
        msg3("Removing git-svn-id and unify shortlog from commit messages...")
        run(
            (
                "git-filter-repo --message-callback '"
                '# filter regular git-svn-id in commit messages\n'
                'message = re.sub(b"\\ngit-svn-id.*\\n", b"", message)\n'
                'if message.startswith(b"git-svn-id: ") and 1 == len(message.splitlines()):\n'
                '    message = re.sub(b"git-svn-id: .*", b"package release", message)\n'
                '# fix shortlog lines not split by empty line\n'
                'message = re.sub(b"^(upgpkg: .+\\-\\d+)\\n(.+)", b"\\\\1\\n\\n\\\\2", message)\n'
                'lines = message.splitlines()\n'
                '# on multiline messages that end with a pkgrel, try to join for better shortlog\n'
                'if len(lines) >= 3 and len(lines[1]) == 0 and len(lines[2]) < 82 and len(lines[2]) > 0 and re.match(b"^upgpkg: .+\\-\\d+$", lines[0]):\n'
                '    # remove hyphen if shortlog starts with one\n'
                '    shortlog = lines[2].strip() if not lines[2].startswith(b"- ") else lines[2][2:].strip()\n'
                '    message = lines[0] + b": " + shortlog\n'
                '    # join the rest of the lines\n'
                '    if len(lines) > 3:\n'
                '        message += b"\\n\\n" + b"\\n".join(lines[3:])\n'
                '# replace upgpkg part for shortlog with extra details as its covered by git tags\n'
                'message = re.sub(b"^upgpkg: .+\\-\\d+[:;]? +", b"", message)\n'
                '# replace pkgbase in upgpkg messages as we have one repo per pkgbase\n'
                'message = re.sub(b"^(upgpkg: ).+ (.+\\-\\d)", b"\\\\1\\\\2", message)\n'
                'message = re.sub(b"^(addpkg: ).+ (.+\\-\\d)", b"\\\\1\\\\2", message)\n'
                'if not message.strip():\n'
                '    message = b"package update"\n'
                "return message.strip()'"
            ),
            check=True,
            cwd=package_dir,
            shell=True,
            stdout=PIPE,
        )
        msg3("Removing '# $Id$' from PKGBUILD...")
        run(
            (
                "git-filter-repo --blob-callback "
                '\'blob.data = blob.data.replace(b"# $Id$\\n", b"")\''
            ),
            check=True,
            cwd=package_dir,
            shell=True,
            stdout=PIPE,
        )
        msg3("Removing unwanted artifacts...")
        run(
            (
                "git-filter-repo --invert-paths "
                "--path-glob '*.pkg.tar.*' "
                "--path-glob '*.tgz' "
                "--path-glob '*.tar.gz' "
                "--path-glob '*.tar.xz' "
                "--path-glob '*.tar.bz2' "
                "--path-glob '*.deb' "
                "--path-glob '*.zip' "
                "--path-glob '*.jar' "
                "--path-glob '*.log' "
                "--path-glob '*.sig' "
                "--path-glob '*.sign' "
                "--path-glob 'botan.key' "
                "--path-glob 'public.key' "
                "--path-regex '^[^/]+\\.asc$' "
            ),
            check=True,
            cwd=package_dir,
            shell=True,
            stdout=PIPE,
        )
    except CalledProcessError as e:
        error1("Error rewriting history...", topic=package_dir.name)
        raise e


def tag_releases(package_dir: Path, releases: List[Release], authors: Dict[str, Author]):
    """Generate git tags from the release objects.

    Args:
        package_dir (Path): package directory.
        releases (List[Release]): list of releases.
        authors (Dict[str, Author]): author mapping.
    """
    msg2("Tagging releases...")
    release_map = {}
    for release in releases:
        release_map[release.file_hash] = release

    released: Dict[str, Release] = {}
    try:
        p = run(
            "git log --pretty='%h'",
            check=True,
            cwd=package_dir,
            shell=True,
            stdout=PIPE,
        )
        commits = p.stdout.decode().splitlines()
    except CalledProcessError as e:
        error1("Error getting commit history", topic=package_dir.name)
        raise e

    # Reverse tagging order to left the tag in the latest commit
    for commit in commits:
        pkgbuild = get_pkgbuild(package_dir, "PKGBUILD", commit)
        if not pkgbuild:
            continue

        md5 = hashlib.md5(pkgbuild)
        file_hash = md5.hexdigest()

        if file_hash not in release_map:
            continue

        release = release_map[file_hash]
        version = release.version

        # Set git specific environment vars to reflect archrelease information
        if release.name not in authors:
            error1(f"Error fetching author info for {release.name}", topic=package_dir.name)
            continue
        author = authors[release.name]
        env = os.environ.copy()
        env['GIT_AUTHOR_DATE'] = release.date
        env['GIT_COMMITTER_DATE'] = release.date
        env['GIT_AUTHOR_NAME'] = author.name
        env['GIT_COMMITTER_NAME'] = author.name
        env['GIT_AUTHOR_EMAIL'] = author.email
        env['GIT_COMMITTER_EMAIL'] = author.email

        try:
            run(
                f"git tag -f {version.tag} {commit} -m 'Package release {version}'",
                check=True,
                cwd=package_dir,
                shell=True,
                env=env,
            )
        except CalledProcessError:
            error1(f"Error tagging release {version.tag} for pkgver {version}", topic=package_dir.name)
            continue

        release.target_commit = commit
        released[version.tag] = release
        debug3(f'Tagged {commit} for release {release}')

    for release in releases:
        if release.version.tag in released:
            continue

        warn2(f"Failed to tag {release.version.tag} for version {release.version} with file-hash {release.file_hash} of input-commit {release.input_commit}", pedantic=True)

    if not released:
        warn2(f"Failed to tag any out of {len(releases)} releases", pedantic=True)


def clean_up(package_dir: Path):
    """Clean up repository and run garbage collector.

    Args:
        package_dir (Path): package directory.
    """
    msg2("Cleaning up...")
    try:
        run(f"git branch -m {BRANCH_NAME}", cwd=package_dir, check=True, shell=True)

        shutil.rmtree(package_dir / ".git/refs/original", ignore_errors=True)
        shutil.rmtree(package_dir / ".git/refs/remotes", ignore_errors=True)
        shutil.rmtree(package_dir / ".git/logs", ignore_errors=True)

        run(
            (
                "git for-each-ref"
                ' --format="%(refname)" refs/original'
                " | xargs -n1 --no-run-if-empty git update-ref -d"
            ),
            check=True,
            cwd=package_dir,
            shell=True,
        )
        run(
            (
                "git -c gc.reflogExpire=0 -c gc.reflogExpireUnreachable=0"
                " -c gc.rerereresolved=0 -c gc.rerereunresolved=0"
                " -c gc.pruneExpire=now gc --aggressive"
            ),
            check=True,
            cwd=package_dir,
            shell=True,
        )
    except CalledProcessError as e:
        error1("Error cleaning up...", topic=package_dir.name)
        raise e


if __name__ == "__main__":
    input_dir, target_dir, packages, authors = parse_input()
    msg1(f"Using input directory: {input_dir}")
    msg1(f"Using target directory: {target_dir}")

    for package in packages:
        msg1(f"Converting {package}...")

        package_dir = target_dir / package
        if package_dir.exists():
            msg2("Removing old checkout...")
            shutil.rmtree(package_dir)

        try:
            clone_repository(input_dir, package_dir)
            releases = get_releases(package_dir)
            filter_subdirectory(package_dir, Path("trunk"))
            rewrite_history(package_dir)
            tag_releases(package_dir, releases, authors)
            clean_up(package_dir)
        except Exception as e:
            error1(f'Uncaught exception: {traceback.format_exception(e)}', topic=package)
            raise e
