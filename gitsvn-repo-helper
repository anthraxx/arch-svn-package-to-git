#!/bin/bash

usage() {
    cat <<- _EOF_
		Usage: ${BASH_SOURCE[0]} list REPO
		       Returns all packages in the target repo.

		   or: ${BASH_SOURCE[0]} since COMMIT REPO
		       Returns all packages fetched in the target repo since a specific commit.

		   or: ${BASH_SOURCE[0]} fetch [--list] REPO
		       Fetches the target repo and prints the old HEAD to be able to query for changed packages.
		       If --list is passed, print all changed packages instead of commit hashes.

		   or: ${BASH_SOURCE[0]} configure REPO
		       Configure the target bare repo as mirror and fetch all refs.

		   or: ${BASH_SOURCE[0]} clone REPO [TARGET]
		       Clones the gitsvn repo as mirror and fetch all refs into the target dir.
		       REPO can be an url or one of: community, packages
		       TARGET is an optional path and defaults to the repo basename
_EOF_
}

list_packages() {
	for repo in "$@"; do
		grep refs/heads/packages/ "${repo}"/packed-refs | \
			sed -E 's|.+ refs/heads/packages/(.+)|\1|'
	done
}

list_packages_since() {
	repo="$2"
	since="$(git -C "${repo}" rev-parse "${1}")"
	head="$(git -C "${repo}" rev-parse refs/heads/master)"
	if [[ "${head}" == "${since}" ]]; then
		return
	fi
	git -C "${repo}" rev-list "${since}"..refs/heads/master | \
		xargs git -C "${repo}" show --pretty="" --name-only | \
		sed -E 's|([^/]+)/.*|\1|' | \
		sort -u
}

fetch() {
	repo="$1"
	list="$2"
	anchor="$(git -C "${repo}" rev-parse refs/heads/master)~40"
	printf "Current HEAD: %s\n" "${anchor}" >&2
	printf "Fetching changes, this can take a while...\n" >&2
	git -C "${repo}" fetch origin --prune --prune-tags
	head="$(git -C "${repo}" rev-parse refs/heads/master)"
	printf "old HEAD: %s\n" "${anchor}" >&2
	printf "new HEAD: %s\n" "${head}" >&2

	git_pack_refs "${repo}"

	if (( list)); then
		list_packages_since "${anchor}" "${repo}"
	else
		if [[ "${head}" != "${anchor}" ]]; then
			printf "Command to list changed packages: \n"
			printf "  # %s since %s %s\n" "${BASH_SOURCE[0]}" "${anchor}" "${repo}"
		fi
	fi
}

configure() {
	repo="$1"
	git -C "${repo}" config --local remote.origin.fetch "+refs/*:refs/*"
	git -C "${repo}" config --local remote.origin.mirror true
}

clone() {
	src="$1"
	target="$2"

	if [[ $src == community ]] || [[ $src == packages ]]; then
		src="https://github.com/archlinux/svntogit-$src"
	fi
	if [[ -z $target ]]; then
		target=$(basename "${src}")
	fi
	git clone --mirror "${src}" "${target}"
	git_pack_refs "${target}"
}

git_pack_refs() {
	repo="$1"
	git -C "${repo}" pack-refs --all
}

require_args() {
	if (( $1 < $2 )); then
		usage
		exit 1
	fi
}

case $1 in
	fetch)
		shift;
		require_args $# 1
		list=0
		repo="$1"
		if [[ $1 == --list ]]; then
			require_args $# 2
			list=1
			repo="$2"
		fi
		fetch "${repo}" $list
		;;
	list)
		shift;
		require_args $# 1
		list_packages "$@"
		;;
	since)
		shift;
		require_args $# 2
		list_packages_since "$1" "$2"
		;;
	configure)
		shift;
		require_args $# 1
		configure "$1"
		;;
	clone)
		shift;
		require_args $# 1
		clone "$1" "$2"
		;;
	-h|--help)
		usage
		;;
	*)
		usage
		exit 1
esac
